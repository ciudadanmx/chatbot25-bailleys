const { createBot, createProvider, createFlow, addKeyword } = require('@bot-whatsapp/bot')

const QRPortalWeb = require('@bot-whatsapp/portal')
const BaileysProvider = require('@bot-whatsapp/provider/baileys')
const MockAdapter = require('@bot-whatsapp/database/mock')

const flowSecundario = addKeyword(['2', 'siguiente'])
.addAnswer(['üìÑ El siguiente paso es la contrataci√≥n de tu ChatbotPublia, ingresa la descripci√≥n del Chatbot que deseas para recibir una cotizaci√≥n en l√≠nea.'])

const flowDocs = addKeyword(['info', 'informacion', 'informaci√≥n']).addAnswer(
    [
        'üìÑ Publia.Club es la Agencia digital Colaborativa que te brinda el mejor servicio a los mejores costos.',
    ]
)
.addAnswer(
    [
        'üíª Realizamos sitios web, üì± programaci√≥n de aplicaciones, ü§ñ Chatbots, üé¨ Multimedia, üì¢ Campa√±as y mucho m√°s ‚ú®',
    ],
)
    .addAnswer(
       [
        '\n*2* Para siguiente paso.',
        ],
    null,
    null,
    [flowSecundario]
)

const flowTuto = addKeyword(['chatbot', 'chatbots']).addAnswer(
    [
        'üôå √âste es un ejemplo de Chatbot, sin embargo los Chatbots pueden hacer mucho m√°s',
        'üåê Automatizar respuestas frecuentes',
        'üìä Conectar con CRMs y sistemas de ventas',
        'üõí Procesar pedidos y pagos',
        'ü§ù Dar soporte al cliente 24/7',
        'üéØ Enviar campa√±as personalizadas',
        'üìà Generar m√©tricas de interacci√≥n en tiempo real',
        '\nüëâ Aqu√≠ un ejemplo pr√°ctico:',
        'https://bot-whatsapp.netlify.app/docs/example/',
    ]
)
.addAnswer(
    [
        '‚ö†Ô∏è Importante: Se recomienda **ampliamente** usar la *API Oficial de Meta* para WhatsApp.',
        '‚úÖ Mayor estabilidad y soporte oficial',
        '‚úÖ Cumplimiento con las pol√≠ticas de WhatsApp',
        '‚úÖ Seguridad y cifrado garantizado',
        '‚úÖ Menos riesgo de bloqueos de n√∫mero',
        '‚úÖ Escalabilidad para empresas y proyectos grandes',
        '\nüëâ Usar librer√≠as no oficiales puede funcionar en pruebas, pero no es confiable en producci√≥n.',
    ],
    )
    .addAnswer(
       [
        '\n*2* Para siguiente paso.',
        ],

    null,
    null,
    [flowSecundario]
)

const flowGracias = addKeyword(['API', 'api', 'meta']).addAnswer(
    [
        'üì± **C√≥mo agregar un n√∫mero a la API oficial de Meta WhatsApp:**',
        '1Ô∏è‚É£ Crear una cuenta de Facebook Business Manager: https://business.facebook.com/',
        '2Ô∏è‚É£ Verificar tu empresa ‚úÖ (documentos legales, direcci√≥n, RFC si aplica)',
        '3Ô∏è‚É£ Crear un WhatsApp Business Account (WABA) desde el Business Manager',
        '4Ô∏è‚É£ Vincular tu n√∫mero de tel√©fono üìû al WABA (el n√∫mero debe poder recibir llamadas o SMS)',
        '5Ô∏è‚É£ Configurar un **token de acceso** para la API en la secci√≥n de WhatsApp -> Configuraci√≥n -> Generar Token üîë',
        '6Ô∏è‚É£ Elegir la plataforma o librer√≠a oficial para tu bot (por ejemplo, *Meta for Developers*)',
        '7Ô∏è‚É£ Probar el n√∫mero con mensajes de prueba üß™ y asegurarte que recibe y env√≠a correctamente',
        '8Ô∏è‚É£ Revisar l√≠mites y pol√≠ticas de mensajes üìú para no ser bloqueado',
        '9Ô∏è‚É£ Escalar tu bot a producci√≥n üöÄ y monitorear m√©tricas de uso üìä',
        '\nüí° **Tips:**',
        '‚úÖ Usa la API oficial siempre para evitar bloqueos y problemas legales',
        '‚úÖ No uses n√∫meros personales ni librer√≠as no oficiales en producci√≥n',
        '‚úÖ Mant√©n tu token seguro y renueva antes de que expire üîí',
    ],
)
    .addAnswer(
       [
        '\n*2* Para siguiente paso.',
        ],
    null,
    null,
    [flowSecundario]
)

const flowDiscord = addKeyword(['discord']).addAnswer(
    ['ü§™ √önete al discord', 'https://link.codigoencasa.com/DISCORD', '\n*2* Para siguiente paso.'],
    null,
    null,
    [flowSecundario]
)

// Flujo principal
const flowPrincipal = addKeyword(['hola', 'ole', 'alo'])
    .addAnswer('üôå Hola bienvenido al *Chatbot Publia.Club*')
    .addAnswer('‚ùå √âste es un Chatbot de prueba que no est√° hecho con la API Oficial de Meta, por lo que sus funcionalidades son limitadas, no tiene botones e incluso presenta algunas fallas')
    .addAnswer('üò∫ No obstante se muestran algunas opciones favor de responder mensaje con alguna de las palabras exactas resaltadas con negritas.')
    .addAnswer(
        [
            'te comparto los siguientes links de interes sobre el proyecto',
            'üëâ *info* para conocer la info de Publia.MX',
            'üëâ *chatbot*  para conocer los Chatbots para Whatsapp',
            'üëâ *API* para las intrucciones para registrar tu n√∫mero con la API oficial de Meta',
        ],
        null,
        null,
        [flowDocs, flowGracias, flowTuto, flowDiscord]
    )


// Flujo de respaldo (catch-all)
const flowFallback = addKeyword([''], { sensitive: false, catchAll: true })
    .addAnswer('üôå Hola bienvenido al *Chatbot Publia.Club*')
    .addAnswer('‚ùå √âste es un Chatbot de prueba que no est√° hecho con la API Oficial de Meta, por lo que sus funcionalidades son limitadas, no tiene botones e incluso presenta algunas fallas')
    .addAnswer('üò∫ No obstante se muestran algunas opciones favor de responder mensaje con alguna de las palabras exactas resaltadas con negritas.')
    .addAnswer(
        [
            'te comparto los siguientes links de interes sobre el proyecto',
            'üëâ *info* para conocer la info de Publia.MX',
            'üëâ *chatbot*  para conocer los Chatbots para Whatsapp',
            'üëâ *API* para las intrucciones para registrar tu n√∫mero con la API oficial de Meta',
        ],
        null,
        null,
        [flowDocs, flowGracias, flowTuto, flowDiscord]
    )

const main = async () => {
    const adapterDB = new MockAdapter()
    const adapterFlow = createFlow([flowPrincipal, flowFallback]) // ojo aqu√≠, incluimos el fallback
    const adapterProvider = createProvider(BaileysProvider)

    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    })

    QRPortalWeb()
}


main()
